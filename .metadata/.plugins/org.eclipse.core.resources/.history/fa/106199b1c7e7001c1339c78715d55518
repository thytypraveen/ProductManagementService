package com.ItemCommentService.service;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ItemCommentService.entity.Item;
import com.ItemCommentService.entity.User;
import com.ItemCommentService.repository.ItemRepository;
import com.ItemCommentService.repository.UserRepository;

import ItemcommentService.exception.ResourceNotFoundException;
@Service
public class ItemService {
	 @Autowired
	    private ItemRepository itemRepository;

	    @Autowired
	    private UserRepository userRepository;


	public Optional<Item> addItem(Long id, Item item) {
        return Optional.ofNullable(userRepository.findById(id).map(user -> {
            item.setUser(user);
            return itemRepository.save(item);
        }).orElseThrow(() -> new ResourceNotFoundException("UserId" + id + "Not Found")));
    }
	
	 public Item updateItem(Long id, Item item1){
	        Item item = findItem(id);
	        item.setTitle(item1.getTitle());
	        item.setDescription(item1.getDescription());
	        itemRepository.save(item);
	        return  findItem(id);
	    }
	 public Item findItem(Long id){
	       return itemRepository.findById(id).get();
	    }

	public List<Item> getItemById(Long id) {
        List<Item> l1 = getAll(id);
		return l1;
	}

	 public List<Item> getAll(Long id){
	      User u =  userRepository.findById(id).get();
    return itemRepository.findAll().stream().filter(item -> item.getUser().equals(u)).collect(Collectors.toList()); // use Map with filter 
   }

	public Optional<Item> getByItemId(long id) {
		return itemRepository.findById(id);
	}

	public void deleteItem(Long id){
        
            itemRepository.deleteById(id);
    }
	
}
