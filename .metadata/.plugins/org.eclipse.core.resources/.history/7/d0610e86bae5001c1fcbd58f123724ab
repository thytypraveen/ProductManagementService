package com.capillary.Controller;


import com.capillary.Model.Item;
import com.capillary.Model.User;
import com.capillary.Repository.ItemRepository;
import com.capillary.Repository.UserRepository;
import com.capillary.Service.ItemService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/items")
public class ItemController {
    
    @Autowired
    private ItemService itemService;

    @GetMapping("/{id}")
    public List<Item> getAllItems(@PathVariable(value = "id")Long id){
        return itemService.getAll(id);
    }
    
   
   
    
   @GetMapping("/{id}/{title}")
   public List<Item> getItemByUserId(@PathVariable(value = "userid")Long id, @PathVariable(value = "title") String title){
	return itemService.getItemByName(id, title);
	   
   }

    @PostMapping("add/{id}")
    public Item add(@PathVariable(value = "id") Long userid, @RequestBody Item it){
        return itemService.addItem(userid,it).get();
    }

    @DeleteMapping("delete/{id}")
    public void delete(@PathVariable(value = "id")Long id){
        itemService.deleteItem(id);
    }


    @GetMapping("/name/{id}/{title}")
    public List<Item> getItemsByName(@PathVariable(value = "id")Long id, @PathVariable(value = "title") String title){
      return   itemService.getItemByName(id,title);
    }
    
   

    @PutMapping("/{id}/{title}")
    public List<Item> updateItem(@PathVariable(value = "id")Long id,@PathVariable(value = "title") String title,@RequestBody Item item){
        itemService.update(id,title,item);
        return itemService.getItemByName(id,title);
    }

    @DeleteMapping("/{id}/{title}")
    public ResponseEntity<String> deleteByName(@PathVariable(value = "id")Long id,@PathVariable(value = "title") String title){
        itemService.deleteItemName(id,title);
        List<Item> l1 = itemService.getItemByName(id,title);
        if ((l1.isEmpty())){
            return new ResponseEntity<>("Deleted Successfully", HttpStatus.OK);
        }
        return new ResponseEntity<>("Deletion Failed",HttpStatus.NOT_FOUND);
    }

    @PutMapping("/{id}/reminder/{title}")
    public List<Item> updateReminderTime(@PathVariable(value = "id")Long id,@PathVariable(value = "title") String title,@RequestBody Item item){
        itemService.updateReminder(id,title,item);
        return itemService.getItemByName(id,title);
    }
    
	
    
	/*
	 * @GetMapping("/all") public List<Item> getPriority(){ return
	 * itemService.getAllPriority(); }
	 */
    
   
    
    @GetMapping("/priority/{id}")
    public List<Item> getprioritiesById(@PathVariable(value = "id")Long id){
        return itemService.getAll(id);
    }
    
    @PutMapping("updatepriority/{id}")
    public Item updatePriority(Long id, Item itm) {
		return itemService.UpdatePriority(id, itm);
    	
    }
    
    
    @DeleteMapping("delpriority/{id}")
    public void deletePriority(@PathVariable(value = "id")Long id) {
    	itemService.deletePriorityById(id);
    }
    
    
    
    
    
    
    
}
